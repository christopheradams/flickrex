{
  "stat": "ok",
  "method": {
    "requiredperms": "1",
    "needssigning": 1,
    "needslogin": 1,
    "name": "flickr.photos.getWithoutGeoData",
    "description": {
      "_content": "Returns a list of your photos which haven't been geo-tagged."
    }
  },
  "errors": {
    "error": [
      {
        "message": "SSL is required",
        "code": 95,
        "_content": "SSL is required to access the Flickr API."
      },
      {
        "message": "Invalid signature",
        "code": 96,
        "_content": "The passed signature was invalid."
      },
      {
        "message": "Missing signature",
        "code": 97,
        "_content": "The call required signing but no signature was sent."
      },
      {
        "message": "Login failed / Invalid auth token",
        "code": 98,
        "_content": "The login details or auth token passed were invalid."
      },
      {
        "message": "User not logged in / Insufficient permissions",
        "code": 99,
        "_content": "The method requires user authentication but the user was not logged in, or the authenticated method call did not have the required permissions."
      },
      {
        "message": "Invalid API Key",
        "code": 100,
        "_content": "The API key passed was not valid or has expired."
      },
      {
        "message": "Service currently unavailable",
        "code": 105,
        "_content": "The requested service is temporarily unavailable."
      },
      {
        "message": "Write operation failed",
        "code": 106,
        "_content": "The requested operation failed due to a temporary issue."
      },
      {
        "message": "Format \"xxx\" not found",
        "code": 111,
        "_content": "The requested response format was not found."
      },
      {
        "message": "Method \"xxx\" not found",
        "code": 112,
        "_content": "The requested method was not found."
      },
      {
        "message": "Invalid SOAP envelope",
        "code": 114,
        "_content": "The SOAP envelope send in the request could not be parsed."
      },
      {
        "message": "Invalid XML-RPC Method Call",
        "code": 115,
        "_content": "The XML-RPC request document could not be parsed."
      },
      {
        "message": "Bad URL found",
        "code": 116,
        "_content": "One or more arguments contained a URL that has been used for abuse on Flickr."
      }
    ]
  },
  "arguments": {
    "argument": [
      {
        "optional": 0,
        "name": "api_key",
        "_content": "Your API application key. <a href=\"/services/api/misc.api_keys.html\">See here</a> for more details."
      },
      {
        "optional": "1",
        "name": "max_upload_date",
        "_content": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
      },
      {
        "optional": "1",
        "name": "min_taken_date",
        "_content": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp."
      },
      {
        "optional": "1",
        "name": "max_taken_date",
        "_content": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp."
      },
      {
        "optional": "1",
        "name": "privacy_filter",
        "_content": "Return photos only matching a certain privacy level. Valid values are:\n<ul>\n<li>1 public photos</li>\n<li>2 private photos visible to friends</li>\n<li>3 private photos visible to family</li>\n<li>4 private photos visible to friends &amp; family</li>\n<li>5 completely private photos</li>\n</ul>\n"
      },
      {
        "optional": "1",
        "name": "sort",
        "_content": "The order in which to sort returned photos. Deafults to date-posted-desc. The possible values are: date-posted-asc, date-posted-desc, date-taken-asc, date-taken-desc, interestingness-desc, and interestingness-asc."
      },
      {
        "optional": "1",
        "name": "media",
        "_content": "Filter results by media type. Possible values are <code>all</code> (default), <code>photos</code> or <code>videos</code>"
      },
      {
        "optional": "1",
        "name": "min_upload_date",
        "_content": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime."
      },
      {
        "optional": 1,
        "name": "extras",
        "_content": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: <code>description</code>, <code>license</code>, <code>date_upload</code>, <code>date_taken</code>, <code>owner_name</code>, <code>icon_server</code>, <code>original_format</code>, <code>last_update</code>, <code>geo</code>, <code>tags</code>, <code>machine_tags</code>, <code>o_dims</code>, <code>views</code>, <code>media</code>, <code>path_alias</code>, <code>url_sq</code>, <code>url_t</code>, <code>url_s</code>, <code>url_q</code>, <code>url_m</code>, <code>url_n</code>, <code>url_z</code>, <code>url_c</code>, <code>url_l</code>, <code>url_o</code>"
      },
      {
        "optional": 1,
        "name": "per_page",
        "_content": "Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500."
      },
      {
        "optional": 1,
        "name": "page",
        "_content": "The page of results to return. If this argument is omitted, it defaults to 1."
      }
    ]
  }
}
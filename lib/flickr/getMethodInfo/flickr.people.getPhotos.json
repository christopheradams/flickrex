{
  "stat": "ok",
  "method": {
    "requiredperms": 0,
    "needssigning": 0,
    "needslogin": 0,
    "name": "flickr.people.getPhotos",
    "description": {
      "_content": "Return photos from the given user's photostream. Only photos visible to the calling user will be returned. This method must be authenticated; to return public photos for a user, use <a href=\"/services/api/flickr.people.getPublicPhotos.html\">flickr.people.getPublicPhotos</a>."
    }
  },
  "errors": {
    "error": [
      {
        "message": "Required arguments missing",
        "code": "1",
        "_content": ""
      },
      {
        "message": "Unknown user",
        "code": "2",
        "_content": "A user_id was passed which did not match a valid flickr user."
      },
      {
        "message": "Invalid API Key",
        "code": 100,
        "_content": "The API key passed was not valid or has expired."
      },
      {
        "message": "Service currently unavailable",
        "code": 105,
        "_content": "The requested service is temporarily unavailable."
      },
      {
        "message": "Write operation failed",
        "code": 106,
        "_content": "The requested operation failed due to a temporary issue."
      },
      {
        "message": "Format \"xxx\" not found",
        "code": 111,
        "_content": "The requested response format was not found."
      },
      {
        "message": "Method \"xxx\" not found",
        "code": 112,
        "_content": "The requested method was not found."
      },
      {
        "message": "Invalid SOAP envelope",
        "code": 114,
        "_content": "The SOAP envelope send in the request could not be parsed."
      },
      {
        "message": "Invalid XML-RPC Method Call",
        "code": 115,
        "_content": "The XML-RPC request document could not be parsed."
      },
      {
        "message": "Bad URL found",
        "code": 116,
        "_content": "One or more arguments contained a URL that has been used for abuse on Flickr."
      }
    ]
  },
  "arguments": {
    "argument": [
      {
        "optional": 0,
        "name": "api_key",
        "_content": "Your API application key. <a href=\"/services/api/misc.api_keys.html\">See here</a> for more details."
      },
      {
        "optional": "0",
        "name": "user_id",
        "_content": "The NSID of the user who's photos to return. A value of \"me\" will return the calling user's photos."
      },
      {
        "optional": "1",
        "name": "safe_search",
        "_content": "Safe search setting:\n\n<ul>\n<li>1 for safe.</li>\n<li>2 for moderate.</li>\n<li>3 for restricted.</li>\n</ul>\n\n(Please note: Un-authed calls can only see Safe content.)"
      },
      {
        "optional": "1",
        "name": "min_upload_date",
        "_content": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
      },
      {
        "optional": "1",
        "name": "max_upload_date",
        "_content": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
      },
      {
        "optional": "1",
        "name": "min_taken_date",
        "_content": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
      },
      {
        "optional": "1",
        "name": "max_taken_date",
        "_content": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
      },
      {
        "optional": "1",
        "name": "content_type",
        "_content": "Content Type setting:\n<ul>\n<li>1 for photos only.</li>\n<li>2 for screenshots only.</li>\n<li>3 for 'other' only.</li>\n<li>4 for photos and screenshots.</li>\n<li>5 for screenshots and 'other'.</li>\n<li>6 for photos and 'other'.</li>\n<li>7 for photos, screenshots, and 'other' (all).</li>\n</ul>"
      },
      {
        "optional": "1",
        "name": "privacy_filter",
        "_content": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are:\n<ul>\n<li>1 public photos</li>\n<li>2 private photos visible to friends</li>\n<li>3 private photos visible to family</li>\n<li>4 private photos visible to friends & family</li>\n<li>5 completely private photos</li>\n</ul>"
      },
      {
        "optional": 1,
        "name": "extras",
        "_content": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: <code>description</code>, <code>license</code>, <code>date_upload</code>, <code>date_taken</code>, <code>owner_name</code>, <code>icon_server</code>, <code>original_format</code>, <code>last_update</code>, <code>geo</code>, <code>tags</code>, <code>machine_tags</code>, <code>o_dims</code>, <code>views</code>, <code>media</code>, <code>path_alias</code>, <code>url_sq</code>, <code>url_t</code>, <code>url_s</code>, <code>url_q</code>, <code>url_m</code>, <code>url_n</code>, <code>url_z</code>, <code>url_c</code>, <code>url_l</code>, <code>url_o</code>"
      },
      {
        "optional": 1,
        "name": "per_page",
        "_content": "Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500."
      },
      {
        "optional": 1,
        "name": "page",
        "_content": "The page of results to return. If this argument is omitted, it defaults to 1."
      }
    ]
  }
}